using System;
using System.Collections.Generic;
using System.Text;

/// <summary>
/// A node in the minimax graph
/// </summary>
public class MinimaxNode 
{
    /// <summary>
    /// Parent Node in the tree, null if its the root
    /// </summary>
    public MinimaxNode Parent { get; set; }

    /// <summary>
    /// Children owned by this node, empty if its a static evaluation
    /// </summary>
    public List<MinimaxNode> Children = new List<MinimaxNode>();

    /// <summary>
    /// Player that made the move that generated this permutation
    /// </summary>
    public byte Player;

    /// <summary>
    /// Representation of the board in the current permutation
    /// </summary>
    public byte[,] GameState = new byte[3,3];

    /// <summary>
    /// Highlighting the co-ordinate that was changed to create this permutation
    /// </summary>
    public (byte, byte) ModifiedCoordinate;

    /// <summary>
    /// Static cache of the score generated by the evaluation, for performance and debugging
    /// </summary>
    public int Score = 0;

    /// <summary>
    /// Creates a visual representation of the end GameBoard for Debugging Purposes
    /// </summary>
    public string BoardDisplay
    {
        get
        {
            var sb = new StringBuilder();

            for (var y = 0; y < 3; y++)
            {
                for (var x = 0; x < 3; x++)
                {
                    var data = GameState[x, y];
                    switch (data)
                    {
                        case 0:
                            sb.Append("b");
                            break;
                        case 1:
                            sb.Append("X");
                            break;
                        case 2:
                            sb.Append("O");
                            break;
                    }
                }

                sb.Append("\n");
            }

            return sb.ToString();
        }
    }
    /// <summary>
    /// Depth of the current node based on its parent
    /// </summary>
    public int Depth
    {
        get
        {
            if (Parent == null)
                return 0;

            return Parent.Depth + 1;
        }
    }

    /// <summary>
    /// Creates a static evaluation
    /// </summary>
    private void DoStaticEval()
    {
        if (CheckForWinningMove(1))
        {
            Score = 10 - Depth;
        }

        if (CheckForWinningMove(2))
        {
            Score = -10 + Depth;
        }
    }

    /// <summary>
    /// Evaluates the current node
    /// </summary>
    /// <param name="bestNode">Output parameter that displays the best child of this node</param>
    /// <param name="alpha">Alpha Value</param>
    /// <param name="beta">Beta Value</param>
    /// <returns>Returns the score of the best child</returns>
    public int Evaluate(out MinimaxNode bestNode, int alpha, int beta)
    {
        bestNode = null;

        //If there are no children, perform static eval and exit
        if (Children.Count == 0)
        {
            DoStaticEval();
            return Score;
        }

        /*
         * Human = Maximising Player
         * AI = Minimising Player
         */

        //Swap player of the new permutation based on the current permutation
        var runningEval = Player == (byte)2 ? int.MinValue : int.MaxValue;

        //Evaluate each child
        foreach (var child in Children)
        {
            var eval = child.Evaluate(out var ignored, alpha, beta);
            var oldRunningEval = runningEval;

            if (Player == (byte) 2)
            {
                runningEval = Math.Max(runningEval, eval);
                alpha = Math.Max(alpha, eval);
                if (beta <= alpha)
                    break;
            }
            else
            {
                runningEval = Math.Min(runningEval, eval);
                beta = Math.Min(beta, eval);
                if (beta <= alpha)
                    break;
            }

            //if running eval was changed, then running eval must be lower, updates best node child
            if (runningEval != oldRunningEval)
            {
                bestNode = child;
            }

        }

        Score = runningEval;

        return runningEval;
    }

    /// <summary>
    /// Evaluates the board at this permutation to check if win condition has been met
    /// </summary>
    /// <param name="playerToken">Player Token (1 = x, 2 = o)</param>
    /// <returns></returns>
    public bool CheckForWinningMove(byte playerToken)
    {
        //Horizontal Top
        if (GameState[0, 0] == playerToken && GameState[1, 0] == playerToken && GameState[2, 0] == playerToken)
            return true;
        //Horizontal Middle
        if (GameState[0, 1] == playerToken && GameState[1, 1] == playerToken && GameState[2, 1] == playerToken)
            return true;
        //Horizontal Bottom
        if (GameState[0, 2] == playerToken && GameState[1, 2] == playerToken && GameState[2, 2] == playerToken)
            return true;
        //Diagonal L-R
        if (GameState[0, 0] == playerToken && GameState[1, 1] == playerToken && GameState[2, 2] == playerToken)
            return true;
        //Diagonal R-L
        if (GameState[2, 0] == playerToken && GameState[1, 1] == playerToken && GameState[0, 2] == playerToken)
            return true;
        //Vertical Left
        if (GameState[0, 0] == playerToken && GameState[0, 1] == playerToken && GameState[0, 2] == playerToken)
            return true;
        //Vertical Middle
        if (GameState[1, 0] == playerToken && GameState[1, 1] == playerToken && GameState[1, 2] == playerToken)
            return true;
        //Vertical Right
        return GameState[2, 0] == playerToken && GameState[2, 1] == playerToken && GameState[2, 2] == playerToken;
    }
}